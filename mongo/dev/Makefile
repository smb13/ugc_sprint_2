#!make
.PHONY: client

include ./.env

DOCKER_COMPOSE = --env-file ./.env -f ./docker-compose.yml

# Default, Help

default: mongo_up

help: # Вывод информации make командах
	@grep -E '^[a-zA-Z0-9 _-]+:.*#' Makefile | while read -r l; \
	do printf "\033[1;32m$$(echo $$l | cut -f 1 -d':')\033[00m:$$(echo $$l | cut -f 2- -d'#')\n"; done

# Start, First start

mongo_up:
	docker compose $(DOCKER_COMPOSE) up -d

mongo_first_start: mongo_build mongo_up mongo_config mongo_config_shards mongo_config_routers_shards

# Build

mongo_build:
	docker compose $(DOCKER_COMPOSE) build

# Configuration

mongo_up_config:
	docker compose $(DOCKER_COMPOSE) up -d mongocfg1 mongocfg2 mongocfg3

mongo_config:
	docker compose $(DOCKER_COMPOSE) exec -it mongocfg1 bash -c 'echo "rs.initiate({_id: \"mongors1conf\",'\
	' configsvr: true, members: [{_id: 0, host: \"mongocfg1\"}, {_id: 1, host: \"mongocfg2\"},'\
	' {_id: 2, host: \"mongocfg3\"}]})" | mongosh'

# Shards

mongo_up_shards:
	docker compose $(DOCKER_COMPOSE) up -d mongors1n1 mongors1n2 mongors1n3 mongors2n1 mongors2n2 mongors2n3


mongo_config_shards: mongo_config_shards_1 mongo_config_shards_2

mongo_config_shards_1:
	docker exec -it mongors1n1 bash -c 'echo "rs.initiate({_id: \"mongors1\",'\
	' members: [{_id: 0, host: \"mongors1n1\"}, {_id: 1, host: \"mongors1n2\"},'\
	' {_id: 2, host: \"mongors1n3\"}]})" | mongosh'

mongo_config_shards_2:
	docker exec -it mongors2n1 bash -c 'echo "rs.initiate({_id: \"mongors2\",'\
	' members: [{_id: 0, host: \"mongors2n1\"}, {_id: 1, host: \"mongors2n2\"},'\
	' {_id: 2, host: \"mongors2n3\"}]})" | mongosh'

# Routers

mongo_up_mongos:
	docker compose $(DOCKER_COMPOSE) up -d mongos1 mongos2

mongo_config_routers_shards: mongo_config_routers_shards_1 mongo_config_routers_shards_2

mongo_config_routers_shards_1:
	docker exec -it mongos1 bash -c 'echo "sh.addShard(\"mongors1/mongors1n1\")" | mongosh'

mongo_config_routers_shards_2:
	docker exec -it mongos1 bash -c 'echo "sh.addShard(\"mongors2/mongors2n1\")" | mongosh'

# Logs

mongo_logs:
	docker compose $(DOCKER_COMPOSE) logs --tail 100 -f

# Stop & Down

mongo_stop:
	docker compose $(DOCKER_COMPOSE) stop

mongo_down:
	docker compose $(DOCKER_COMPOSE) down --remove-orphans
